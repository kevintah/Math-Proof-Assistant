

This is a work in progress
     -- syntax and examples will appear below

     ----------------------------

          can check if injective
          can check if surjective
          can check bijection
          can do set algebra ( union, intersection, difference)
          can create relations
          can check if it is a relations
          understands demorgans laws
          can proove by Contradiction
          can proove by Contrapositive
          can do direct proove
          can understand quantifiers
          can understand whole numbers
          can map from one set to a new set and compare based on assigned map

     ----------------------------
 
 Example 1
  P implies Q
   -- How does the prototype fair?
         
           --
            ~/projects/math-proof-assistant 21s
❯ npm start
$ node whiteBoard/whiteBoard.js
Enter statement   P
-----Worksheet-----
P
P
Enter consequence   Q
Proposition:


--  proof --
Claim: 
 if ( P ) => Q
Proof:
--By Contradiction --
Assumption: ! ( P ) => Q
This is a contradiction
--By Contrapositive --
!( P )  => !(Q)

    --
     How does it fair with -- !(there exist x in P) implies M implies all x in Proof
     /projects/math-proof-assistant
❯ npm start
$ node whiteBoard/whiteBoard.js
Enter statement   !(there exist x in P)
!(there exist x in P) == (!t&!here exist x in P)
!(there exist x in P) == for all x in P
[ 'for', 'all', 'x', 'in', 'P' ]
 ∀ x in P
-----Worksheet-----
 ∀ x in P
 ∀ x in P
Enter consequence   M
+++++++++++++++++++++++++++++++++++++++++++++M
Proposition:


--  proof --
Claim: 
 if (  ∀ x in P ) => !M
Proof:
--By Contradiction --
Assumption: ! (  ∀ x in P ) => !M
This is a contradiction
--By Contrapositive --
!(  ∀ x in P )  => !(!M)


How about !(PvQ) => M == (!P^!Q)
~/projects/math-proof-assistant
❯ npm start
$ node whiteBoard/whiteBoard.js
Enter statement   !(PvQ)
!(PvQ)
!(PvQ)
(!P^!Q)
!(PvQ) == (!P^!Q)
-----Worksheet-----
!(PvQ)
!(PvQ)
(!P^!Q)
!(PvQ) == (!P^!Q)
!(PvQ)
!(PvQ)
Enter consequence   M
Proposition:


--  proof --
Claim: 
 if ( !(PvQ) ) => M
Proof:
--By Contradiction --
Assumption: ! ( !(PvQ) ) => M
This is a contradiction
--By Contrapositive --
!( !(PvQ) )  => !(M)


What about functions ?

currently takes  sets of form  A=[1,2,3,4] B=[4,5,6,7]

          takes  maps of form   map(x => x*2)



❯ npm start
$ node whiteBoard/whiteBoard.js
Enter statement   A=[1,2,3,4] B=[1,2,3,4]
Enter consequence   map(x => x*1)
A=[1,2,3,4] B=[1,2,3,4]
[ 'A=[1,2,3,4]', 'B=[1,2,3,4]' ]
A=[1,2,3,4]
[ 'A', '[1,2,3,4]' ]
[1,2,3,4]
[1,2,3,4] [1,2,3,4]
map(x => x*1)
f is a  map(x => x*1) from set1 to set2
f is surjective or onto
for every y, there is an x such that f(x) = y
f is a  map(x => x*1) from set1 to set2
f is injective
f is one to one
f is a  map(x => x*1) from set1 to set2
f is one to one and onto
f is a bijection
[ '1', '2', '3', '4' ]
[ '1', '2', '3', '4' ]
[ '1', '2', '3', '4' ]


    - can check injection
    - can check surjection 
    - can check bijection
     How to use coming up after language is streamlined

Still working on prototype. As can be seen it can 
     -almost correctly apply demorgans laws for sets ,
     -can do P implies Q by contradiction and Contrapositive
     -can do demorgan for straight logic

  -- Very bugy at this point but work in progress


  -- Next step will be implementing mathematics functions and relations
